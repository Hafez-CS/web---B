# مستندات پروژه Advanced Financial Predictor API

این پروژه یک API مبتنی بر FastAPI است که برای تحلیل داده‌های مالی و پیش‌بینی مقادیر عددی طراحی شده است. این API امکان بارگذاری فایل‌های CSV و Excel، پاک‌سازی داده‌ها، داده‌کاوی و تولید نمودار پیش‌بینی را فراهم می‌کند. هدف اصلی این پروژه، ارائه ابزاری ساده و کارآمد برای تحلیل داده‌ها و پیش‌بینی با استفاده از مدل‌های یادگیری ماشین است، که مشابه برنامه‌ای با رابط کاربری PyQt5 عمل می‌کند.

## ویژگی‌ها
- **بارگذاری فایل**: پشتیبانی از فایل‌های CSV و Excel (`.csv`, `.xlsx`, `.xls`).
- **پاک‌سازی خودکار داده‌ها**: پر کردن مقادیر گمشده و حذف داده‌های پرت با استفاده از روش IQR.
- **داده‌کاوی خودکار**: تولید آمار توصیفی، ماتریس همبستگی و گزارش داده‌های پرت.
- **پیش‌بینی هوشمند**: انتخاب خودکار ستون هدف و مدل یادگیری ماشین با استفاده از Gemini API.
- **نمودار پیش‌بینی**: تولید نمودار خطی شامل مقادیر واقعی، پیش‌بینی‌شده و پیش‌بینی‌های آینده.
- **پشتیبانی از زبان فارسی**: نمایش عناوین و لیبل‌های نمودار به زبان فارسی با فونت Vazir.

## پیش‌نیازها
برای اجرای این API، باید موارد زیر را نصب کنید:
- Python 3.8 یا بالاتر
- کتابخانه‌های مورد نیاز:
  ```bash
  pip install pandas numpy scikit-learn matplotlib openpyxl fastapi uvicorn python-multipart google-genai arabic-reshaper python-bidi
  ```
- فونت Vazir برای نمایش صحیح متن فارسی (اختیاری، اما توصیه می‌شود).
- کلید API معتبر برای Gemini API.

## نصب و راه‌اندازی
1. **کلون کردن پروژه**:
   ```bash
   git clone <repository-url>
   cd <repository-directory>
   ```

2. **نصب کتابخانه‌ها**:
   ```bash
   pip install -r requirements.txt
   ```
   یا به صورت دستی:
   ```bash
   pip install pandas numpy scikit-learn matplotlib openpyxl fastapi uvicorn python-multipart google-genai arabic-reshaper python-bidi
   ```

3. **تنظیم فونت Vazir**:
   - فایل فونت Vazir را دانلود کنید (مثلاً از [اینجا](https://github.com/rastikerdar/vazir-font)).
   - مسیر فونت را در فایل `app.py` تنظیم کنید:
     ```python
     font_path = "C:/Windows/Fonts/Vazir.ttf"  # یا مسیر مناسب
     ```
   - اگر فونت در دسترس نیست، API به فونت پیش‌فرض (sans-serif) بازمی‌گردد.

4. **تنظیم کلید Gemini API**:
   - کلید API خود را در فایل `app.py` جایگزین کنید:
     ```python
     os.environ['GEMINI_API_KEY'] = 'YOUR_API_KEY_HERE'
     ```
   - یا متغیر محیطی را تنظیم کنید:
     ```bash
     export GEMINI_API_KEY='your-api-key'
     ```

5. **اجرای API**:
   ```bash
   uvicorn app:app --host 0.0.0.0 --port 8000
   ```
   API در آدرس `http://localhost:8000` در دسترس خواهد بود.

## ساختار پروژه
- `app.py`: فایل اصلی API که شامل تمام منطق برنامه است.
- `app_errors.log`: فایل لاگ برای ثبت خطاها و اطلاعات دیباگ.
- `plots/`: دایرکتوری پیشنهادی برای ذخیره فایل‌های PNG نمودارها (اختیاری).

## API Endpoints
### 1. بارگذاری فایل (`POST /upload_file`)
- **توضیح**: بارگذاری فایل CSV یا Excel، انجام خودکار پاک‌سازی داده‌ها و داده‌کاوی.
- **ورودی**:
  - `file`: فایل CSV یا Excel (multipart/form-data).
- **خروجی**: JSON شامل:
  - پیام موفقیت
  - لیست ستون‌های فایل
  - گزارش پاک‌سازی (تعداد ردیف‌های اولیه و نهایی)
  - گزارش داده‌کاوی (آمار توصیفی، ماتریس همبستگی، گزارش داده‌های پرت)
- **مثال درخواست**:
  ```bash
  curl -X POST -F "file=@test.csv" http://localhost:8000/upload_file
  ```
- **مثال پاسخ**:
  ```json
  {
      "message": "فایل با موفقیت بارگذاری شد!",
      "columns": ["name", "age", "salary"],
      "cleaning_report": {
          "initial_rows": 3,
          "cleaned_rows": 3,
          "message": "مقادیر گمشده پرشده با میانگین (ستون‌های عددی) و مد یا رشته خالی (ستون‌های غیرعددی). داده‌های پرت حذف شدند (روش IQR)."
      },
      "mining_report": {
          "descriptive_stats": {...},
          "correlation_matrix": {...},
          "outlier_report": {...}
      }
  }
  ```

### 2. پیش‌بینی (`POST /predict`)
- **توضیح**: اجرای پیش‌بینی با استفاده از مدل یادگیری ماشین پیشنهادی توسط Gemini API و تولید نمودار پیش‌بینی.
- **ورودی**: هیچ (ستون هدف و مدل به صورت خودکار انتخاب می‌شوند).
- **خروجی**: JSON شامل:
  - پیام موفقیت
  - ستون هدف انتخاب‌شده
  - توضیحات Gemini API
  - URL نمودار (برای دریافت از `/plot/{filename}`)
- **مثال درخواست**:
  ```bash
  curl -X POST http://localhost:8000/predict
  ```
- **مثال پاسخ**:
  ```json
  {
      "message": "پیش‌بینی با مدل Random Forest انجام شد.",
      "target_column": "salary",
      "gemini_recommendation": "ستون هدف: salary (به دلیل واریانس بالا). مدل: Random Forest (به دلیل روابط غیرخطی).",
      "plot": "/plot/prediction_salary.png"
  }
  ```

### 3. دریافت نمودار (`GET /plot/{filename}`)
- **توضیح**: دریافت فایل PNG نمودار پیش‌بینی که شامل مقادیر واقعی، پیش‌بینی‌شده و پیش‌بینی‌های آینده است.
- **ورودی**:
  - `filename`: نام فایل PNG (از پاسخ `/predict`).
- **خروجی**: فایل PNG با نوع رسانه `image/png`.
- **مثال درخواست**:
  ```bash
  curl http://localhost:8000/plot/prediction_salary.png --output prediction.png
  ```
- **استفاده در وب**:
  ```html
  <img src="http://localhost:8000/plot/prediction_salary.png" alt="نمودار پیش‌بینی" style="max-width: 100%;">
  ```

## نکات مهم
- **فایل‌های ورودی**:
  - فایل CSV یا Excel باید حداقل یک ستون عددی معتبر (غیر NaN و با واریانس غیرصفر) داشته باشد.
  - مثال فایل CSV:
    ```csv
    name,age,salary
    Ali,25,50000
    Reza,30,60000
    Sara,28,70000
    ```
- **مدیریت خطاها**:
  - خطاها در فایل `app_errors.log` ثبت می‌شوند. در صورت بروز مشکل (مثل خطای 500)، این فایل را بررسی کنید.
  - خطاهای رایج شامل فایل خالی، فرمت نامناسب یا مقادیر نامعتبر است.
- **فونت فارسی**:
  - برای نمایش صحیح متن فارسی در نمودار، فونت Vazir را نصب کنید و مسیر آن را در `app.py` تنظیم کنید.
- **ذخیره نمودارها**:
  - فایل‌های PNG در دایرکتوری فعلی ذخیره می‌شوند. برای مدیریت بهتر، می‌توانید دایرکتوری `plots/` ایجاد کنید:
    ```python
    filename = f"plots/prediction_{target_column}.png"
    os.makedirs("plots", exist_ok=True)
    ```

## دیباگ و رفع اشکال
- **بررسی خطاها**:
  - فایل `app_errors.log` شامل جزئیات خطاها (مثل نوع استثنا و خط کد) است.
  - اگر خطای 500 رخ داد، این فایل را بررسی کنید و در صورت نیاز با تیم توسعه به اشتراک بگذارید.
- **تست با داده ساده**:
  - از یک فایل CSV ساده (مثل مثال بالا) برای تست استفاده کنید.
- **مشکلات رایج**:
  - **فایل ورودی نامعتبر**: اطمینان حاصل کنید که فایل شامل داده‌های معتبر است.
  - **عدم نصب کتابخانه‌ها**: تمام کتابخانه‌های مورد نیاز را نصب کنید.
  - **کلید Gemini API**: کلید API معتبر را تنظیم کنید.

## استفاده در وب
برای نمایش نمودار در رابط کاربری وب:
1. فایل را با `/upload_file` بارگذاری کنید.
2. با `/predict` پیش‌بینی را انجام دهید و URL نمودار را از پاسخ استخراج کنید.
3. URL را در تگ `<img>` قرار دهید:
   ```html
   <img src="http://localhost:8000/plot/prediction_salary.png" alt="نمودار پیش‌بینی">
   ```

## توسعه‌دهندگان
این پروژه توسط تیم توسعه داخلی طراحی شده است. برای سوالات یا پیشنهادات، با تیم تماس بگیرید.